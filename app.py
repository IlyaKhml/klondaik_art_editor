import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from hashlib import md5

from itertools import combinations
from datetime import datetime
import json
import time

from graph_utils import render_all_charts

from constants import (
    IMMUNITY_COLS, CAP_COLS, RESTORE_COLS, UTILITY_COLS,
    compute_artifact_scores, get_stats_weights
)
from files_utils import finalize_data, build_artifact_file

st.set_page_config(layout="wide", page_title="üß™ Artifact Balance Manager", page_icon="üß™")

# –î–æ–±–∞–≤–∏–º CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("""
<style>
    .characteristic-group {
        border-radius: 10px;
        padding: 10px;
        margin: 10px 0;
    }
    .positive-value { color: green; font-weight: bold; }
    .negative-value { color: red; font-weight: bold; }
    .neutral-value { color: gray; }
    .stTabs [data-baseweb="tab-list"] button {
        height: 50px;
        white-space: pre-wrap;
        border-radius: 10px 10px 0 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    df = pd.read_csv("df.csv")
    df = df.drop(["extra_text_type_eng", "extra_text_level_eng","extra_text_term_eng", 
             "extra_text_type", "extra_text_level", "extra_text_term", 
             "description_new_2", "description_new_eng_2"], axis=1)
    return df

@st.cache_data
def load_balance_notes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
    try:
        with open("balance_notes.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"artifacts": {}, "types": {}, "general": ""}

def save_balance_notes(notes):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
    with open("balance_notes.json", "w", encoding="utf-8") as f:
        json.dump(notes, f, ensure_ascii=False, indent=2)

def count_filled_stats(artifact_row, groups):
    """–ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
    all_cols = []
    for g in groups:
        all_cols.extend(g)

    total = len(all_cols)
    filled = sum(
        1 for col in all_cols
        if col in artifact_row and pd.notna(artifact_row[col]) and artifact_row[col] != 0
    )
    return filled, total


def prepare_data_not_cached(raw_df):

    other_cols = [
        col for col in raw_df.columns
        if col not in IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS and raw_df[col].dtype != 'object'
        and col not in ["cost_main", "new_artefact"]
    ]

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    raw_df["level"] = raw_df["level"].fillna("None").astype(str)
    level_order = ["None", "0", "1", "2", "3", "4", "5", "6", "–ê–±—Å–æ–ª—é—Ç", "–ë–∞–∑–æ–≤—ã–π", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ú–µ–∑–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ì–∏–ø–µ—Ä–º–æ–¥–∏—Ñ–∏–∫–∞—Ç"]
    raw_df["level"] = pd.Categorical(raw_df["level"], categories=level_order, ordered=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
    if "df_data" not in st.session_state:
        st.session_state.df_data = raw_df.copy()

    df = st.session_state.df_data

    if 'level_order' not in st.session_state:
        st.session_state.level_order = level_order

    char_groups = {
        "üõ°Ô∏è –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (immunity)": IMMUNITY_COLS,
        "üìä –õ–∏–º–∏—Ç—ã (cap)": CAP_COLS,
        "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (restore)": RESTORE_COLS,
        "üéí –£—Ç–∏–ª–∏—Ç–∏": UTILITY_COLS,
        "üîß –ü—Ä–æ—á–µ–µ": other_cols,
    }

    return df, char_groups


def display_score_contribution_chart(artifact_row, weights, abs_weights):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–∫–ª–∞–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã–π score –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""

    contributions = []

    # === –æ–±—ã—á–Ω—ã–µ –≤–µ—Å–∞ ===
    for col, weight in weights.items():
        val = artifact_row.get(col, 0)
        if pd.isna(val) or val == 0:
            continue
        score = val * weight
        if score != 0:
            contributions.append((col, score))

    # === abs_weights ===
    for col, weight in abs_weights.items():
        val = artifact_row.get(col, 0)
        if pd.isna(val) or val == 0:
            continue
        if val > 0:
            score = val * weight
        else:
            score = ((val + 1) * -1) * weight
        if score != 0:
            contributions.append((col, score))

    if not contributions:
        st.info("–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ score.")
        return

    contrib_df = pd.DataFrame(contributions, columns=["stat", "score"])
    contrib_df = contrib_df.sort_values("score", ascending=True)  # –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

    # –¶–≤–µ—Ç–∞
    colors = ["green" if x > 0 else "red" for x in contrib_df["score"]]

    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=contrib_df["score"],
        y=[s.replace("_main", "").replace("_", " ").title() for s in contrib_df["stat"]],
        orientation="h",
        marker_color=colors,
        text=[f"{v:+.2f}" for v in contrib_df["score"]],
        textposition="auto",
    ))

    total_score = contrib_df["score"].sum()
    fig.add_vline(x=0, line_dash="dot", line_color="black")
    fig.update_layout(
        title=f"–í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã–π score (Total = {total_score:.2f})",
        xaxis_title="–í–∫–ª–∞–¥ –≤ score",
        yaxis_title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
        height=200 + len(contrib_df) * 20,
        margin=dict(l=150, r=20, t=50, b=40)
    )

    st.plotly_chart(fig, use_container_width=True)

def get_level_order(artifact_type: str):
    """–í–µ—Ä–Ω—ë—Ç –ø–æ—Ä—è–¥–æ–∫ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
    if artifact_type == "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π":
        return ["1", "2", "3", "4", "–ê–±—Å–æ–ª—é—Ç"]
    elif artifact_type == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π":
        return ["–ë–∞–∑–æ–≤—ã–π", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ú–µ–∑–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ì–∏–ø–µ—Ä–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ê–±—Å–æ–ª—é—Ç"]
    else:
        return ["1", "2", "3", "4", "5", "6", "–ê–±—Å–æ–ª—é—Ç"]

def transform_level(val):
    val_str = str(val).strip()
    return f"–£—Ä. {val_str}" if val_str.isdigit() else \
            val_str

def transform_level_column(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()

    df["level"] = df["level"].apply(transform_level)

    # –ü–æ–ª—É—á–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –∑–∞–¥–∞–¥–∏–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    level_order = list(dict.fromkeys(df["level"].dropna()))
    df["level"] = pd.Categorical(df["level"], categories=level_order, ordered=True)

    return df, level_order

def display_artifact_score_comparison(artifact_row, df, weights, abs_weights):
    scored_df = compute_artifact_scores(df, weights, abs_weights)

    artifact_id = artifact_row["artifact_id"]
    art_level = artifact_row["level"]
    art_type = artifact_row["type"]

    current_row = scored_df.loc[scored_df["artifact_id"] == artifact_id].iloc[0]

    # --- —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–≤–Ω—è ---
    level_df = scored_df[scored_df["level"] == art_level]

    fig_level = go.Figure()
    for col, color in [("positive_score", "green"),
                       ("negative_score", "red"),
                       ("total_score", "blue")]:
        fig_level.add_trace(go.Box(
            y=level_df[col],
            name=col.replace("_", " ").title(),
            boxmean="sd",
            marker_color=color,
            opacity=0.6
        ))
        fig_level.add_trace(go.Scatter(
            x=[col.replace("_", " ").title()],
            y=[current_row[col]],
            mode="markers",
            marker=dict(color="black", size=14, symbol="star"),
            name=f"{col} (current)"
        ))
    fig_level.update_layout(
        title=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ —É—Ä–æ–≤–Ω—è {art_level}",
        yaxis_title="Score",
        boxmode="group",
        height=500
    )

    # --- —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞ ---
    type_df = scored_df[scored_df["type"] == art_type].copy()

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
    type_df, level_order = transform_level_column(type_df)

    fig_type = px.scatter(
        type_df,
        x="level",
        y="total_score",
        color="level",
        size="positive_score",
        hover_data=["artifact_id", "positive_score", "negative_score"],
        category_orders={"level": level_order},  # —Ç–µ–ø–µ—Ä—å –ø–æ—Ä—è–¥–æ–∫ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π
        title=f"üìà Score –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è —Ç–∏–ø–∞ {art_type}",
        height=500
    )

    # —Ç–µ–∫—É—â–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    fig_type.add_trace(go.Scatter(
        x=[transform_level(current_row["level"])],
        y=[current_row["total_score"]],
        mode="markers+text",
        text=["–¢–µ–∫—É—â–∏–π"],
        textposition="top center",
        marker=dict(color="black", size=16, symbol="star"),
        name="Current Artifact"
    ))

    # —Ç—Ä–µ–Ω–¥ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    mean_scores = (
        type_df.groupby("level", observed=True)["total_score"]
        .mean()
        .reindex(level_order)   # –ø–æ—Ä—è–¥–æ–∫ –±–µ—Ä—ë–º –∏–∑ transform_level_column
        .dropna()
    )
    fig_type.add_trace(go.Scatter(
        x=mean_scores.index.astype(str),
        y=mean_scores.values,
        mode="lines+markers",
        line=dict(color="blue", dash="dash"),
        name="–°—Ä–µ–¥–Ω–∏–π score"
    ))


    # --- —Ä–µ–Ω–¥–µ—Ä –≤ Streamlit ---
    with st.expander("üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ –∏ —É—Ä–æ–≤–Ω—é**", expanded=False):
        col1, col2 = st.columns([1, 1])
        with col1:
            st.plotly_chart(fig_level, use_container_width=True)
        with col2:
            st.plotly_chart(fig_type, use_container_width=True)

def display_type_stats_distribution(artifact_row, df, char_groups):
    """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞."""

    art_type = artifact_row["type"]
    type_df = df[df["type"] == art_type].copy()

    # –í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –≥—Ä—É–ø–ø
    all_stats = [stat for group in char_groups.values() for stat in group]
    
    stats_data = []
    for stat in all_stats:
        if stat not in type_df.columns:
            continue

        # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
        values = type_df[stat].dropna()
        if (values == 0).all():
            continue  # –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—ã –¥–ª—è —Ç–∏–ø–∞

        sum_pos = values[values > 0].sum()
        sum_neg = values[values < 0].sum()
        current_val = artifact_row.get(stat, 0)

        stats_data.append({
            "stat": stat,
            "sum_pos": sum_pos,
            "sum_neg": sum_neg,
            "current_val": current_val
        })

    if not stats_data:
        st.info("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
        return

    # === –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ ===
    fig = go.Figure()

    # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
    fig.add_trace(go.Bar(
        x=[d["stat"] for d in stats_data],
        y=[d["sum_pos"] for d in stats_data],
        name="–°—É–º–º–∞ +",
        marker_color="green"
    ))

    # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
    fig.add_trace(go.Bar(
        x=[d["stat"] for d in stats_data],
        y=[d["sum_neg"] for d in stats_data],
        name="–°—É–º–º–∞ -",
        marker_color="red"
    ))

    # –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    fig.add_trace(go.Scatter(
        x=[d["stat"] for d in stats_data],
        y=[d["current_val"] for d in stats_data],
        mode="markers+text",
        text=[f"{d['current_val']:.2f}" for d in stats_data],
        textposition="top center",
        marker=dict(color="black", size=12, symbol="star"),
        name="–¢–µ–∫—É—â–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
    ))

    fig.update_layout(
        barmode="relative",
        title=f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ —Ç–∏–ø—É ({art_type})",
        xaxis_title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
        yaxis_title="–°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π",
        height=600
    )

    st.plotly_chart(fig, use_container_width=True)


def display_artifact_card(artifact_row, char_groups, df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ + —Ä–∞–Ω–≥–∏"""
    col1, col2, col3 = st.columns([2, 2, 2])

    # === –ü–æ–¥—Å—á—ë—Ç score –∏ —Ä–∞–Ω–≥–æ–≤ ===
    scored_df = compute_artifact_scores(df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)
    artifact_id = artifact_row["artifact_id"]

    pos_score = scored_df.loc[scored_df["artifact_id"] == artifact_id, "positive_score"].iloc[0]
    neg_score = scored_df.loc[scored_df["artifact_id"] == artifact_id, "negative_score"].iloc[0]
    total_score = scored_df.loc[scored_df["artifact_id"] == artifact_id, "total_score"].iloc[0]

    # —Ä–∞–Ω–≥–∏
    def get_rank(series, aid):
        ranked = series.rank(method="min", ascending=False)
        return int(ranked.loc[scored_df["artifact_id"] == aid].iloc[0]), len(series)

    pos_rank, pos_total = get_rank(scored_df["positive_score"], artifact_id)
    neg_rank, neg_total = get_rank(scored_df["negative_score"], artifact_id)
    total_rank, total_total = get_rank(scored_df["total_score"], artifact_id)

    # === –§—É–Ω–∫—Ü–∏—è –æ–∫—Ä–∞—Å–∫–∏ —á–∏—Å–ª–∞ ===
    def colored_score(value: float) -> str:
        # –Ω–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç -100 –¥–æ 100
        norm = max(-100, min(100, value))
        if norm >= 0:
            # –∑–µ–ª—ë–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–µ—Ä–æ–≥–æ –∫ –∑–µ–ª—ë–Ω–æ–º—É
            intensity = int(155 + (100 * norm / 100))
            color = f"rgb(0,{intensity},0)"
        else:
            # –∫—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–µ—Ä–æ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É
            intensity = int(155 + (100 * abs(norm) / 100))
            color = f"rgb({intensity},0,0)"
        return f"<span style='color:{color}; font-weight:bold'>{value:.2f}</span>"

    with col1:
        st.markdown(f"### {artifact_row['name']}")
        st.write(f"**English name:** {artifact_row['name_eng']}")
        st.write(f"**ID:** {artifact_row['artifact_id']}")
        st.write(f"**–¢–∏–ø:** {artifact_row['type']} (ID: {artifact_row['k_art_subtype']:.0f})")
        st.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {artifact_row['level']} (ID: {artifact_row['k_art_level']:.0f})")
        # === –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å + –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ ===
        if "cost_main" in df.columns and pd.notna(artifact_row.get("cost_main", None)):
            costs = df["cost_main"].fillna(0)
            ranks = costs.rank(method="min", ascending=False)  # 1 = —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
            rank = int(ranks.loc[artifact_row.name])
            total = len(costs)
            cost_val = int(artifact_row["cost_main"])
            st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {cost_val} ({rank} –∏–∑ {total})")
        else:
            st.write("**–°—Ç–æ–∏–º–æ—Å—Ç—å:** N/A") 
    with col2:
        desc = str(artifact_row.get('main_description', ''))
        desc_eng = str(artifact_row.get('main_description_eng', ''))
        if desc != 'nan':
            st.write(f"üìù **–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è (RU):** {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")
        if desc_eng != 'nan':
            st.write(f"üìù **–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è (EN):** {len(desc_eng)} —Å–∏–º–≤–æ–ª–æ–≤")
        if desc != 'nan' and desc_eng != 'nan':
            st.write(f"üìù **RU vs. EN:** {len(desc) - len(desc_eng):+} —Å–∏–º–≤–æ–ª–æ–≤")
        filled, total = count_filled_stats(
            artifact_row, 
            [IMMUNITY_COLS, CAP_COLS, RESTORE_COLS, UTILITY_COLS]
        )
        # –£–±–∏—Ä–∞–µ–º 1 —Å—Ç–∞—Ç (inv_weight), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É –≤—Å–µ—Ö –µ—Å—Ç—å
        st.write(f"**–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–æ–≤:** {filled-1} –∏–∑ {total-1}")
        st.write("**–ù–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç? :**", f"{artifact_row['new_artefact']}")
    with col3:
        if artifact_row.get('tier_main'):
            st.metric("Tier", f"{artifact_row['tier_main']:.0f}")
        if artifact_row.get('af_rank_main'):
            st.metric("Rank", f"{artifact_row['af_rank_main']:.0f}")

        # –≤—ã–≤–æ–¥–∏–º —Å —Ü–≤–µ—Ç–æ–º
        st.markdown(f"**Positive score:** {colored_score(pos_score)} ({pos_rank}/{pos_total})", unsafe_allow_html=True)
        st.markdown(f"**Negative score:** {colored_score(-neg_score)} ({neg_rank}/{neg_total})", unsafe_allow_html=True)  # –¥–µ–ª–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Ü–≤–µ—Ç–∞
        st.markdown(f"**Total score:** {colored_score(total_score)} ({total_rank}/{total_total})", unsafe_allow_html=True)

    st.markdown("#### üßÆ –í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã–π score")
    display_score_contribution_chart(artifact_row, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)
    display_artifact_score_comparison(artifact_row, df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    st.markdown("#### üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")

    weights_sign = {key: 1 if value >= 0 else -1 for key, value in st.session_state.STATS_WEIGHT.items()}
    
    cols_per_row = 3
    for group_name, group_cols in char_groups.items():
        active_chars = []
        for col in group_cols:
            if col in artifact_row.index:
                val = artifact_row[col]
                if pd.notna(val) and val != 0:
                    active_chars.append((col, val))
        
        if active_chars:
            with st.expander(f"{group_name} ({len(active_chars)} –∞–∫—Ç–∏–≤–Ω—ã—Ö)", expanded=True):
                cols = st.columns(cols_per_row)
                for idx, (char, val) in enumerate(active_chars):
                    col_idx = idx % cols_per_row
                    with cols[col_idx]:
                        if val * weights_sign.get(char, 1)  > 0:
                            color_class = "positive-value"
                            symbol = "+" if val > 0 else ""
                        elif val * weights_sign.get(char, 1) < 0:
                            color_class = "negative-value"
                            symbol = "" if val < 0 else "+"
                        else:
                            color_class = "neutral-value"
                            symbol = ""

                        # –†–∞–Ω–≥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
                        series = df[char].dropna()
                        series = series[series != 0]
                        total = len(series)
                        if total > 0 and artifact_row.name in series.index:
                            rank = series.rank(method="min", ascending=False)
                            pos = int(rank.loc[artifact_row.name])
                            rank_str = f" ({pos}/{total})"
                        else:
                            rank_str = ""

                        char_display = char.replace("_main", "").replace("_", " ").title()
                        
                        st.markdown(f"""
                        <div style='padding: 5px; border-radius: 5px; margin: 2px;'>
                            <small>{char_display}</small><br>
                            <span class='{color_class}'>{symbol}{val:.3f}</span>
                            <small>{rank_str}</small>
                        </div>
                        """, unsafe_allow_html=True)


def artifact_editor_tab(df, char_groups):
    """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    st.header("üìù –†–µ–¥–∞–∫—Ç–æ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_type = st.selectbox("üéØ –¢–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", options=[None] + sorted(df['type'].dropna().unique().tolist()), key="editor_type")
        st.session_state.selected_type = selected_type
    with col2:
        selected_level = st.selectbox("üìä –£—Ä–æ–≤–µ–Ω—å", options=[None] + sorted(df['level'].dropna().unique().tolist()), key="editor_level")
        st.session_state.selected_level = selected_level
    with col3:
        search_name = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", key="editor_search")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered = df.copy()
    if selected_type:
        filtered = filtered[filtered["type"] == selected_type]
    if selected_level:
        filtered = filtered[filtered["level"] == selected_level]
    if search_name:
        filtered = filtered[filtered["name"].str.contains(search_name, case=False, na=False)]
    
    if len(filtered) == 0:
        st.warning("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –í—ã–±–æ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    artifact_options = [
        f"{row['artifact_id']} | {row['name']} | {row['type']} | {row['level']}"
        for _, row in filtered.iterrows()
    ]
    selected_option = st.selectbox("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", artifact_options, key="artifact_selector")

    if selected_option:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º DataFrame
        filtered_idx = artifact_options.index(selected_option)
        artifact_row = filtered.iloc[filtered_idx]
        
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º artifact_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º DataFrame
        artifact_id = artifact_row['artifact_id']
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º DataFrame –ø–æ artifact_id
        original_idx = df[df['artifact_id'] == artifact_id].index[0]
        
        selected_art = artifact_row['name']

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        display_artifact_card(artifact_row, char_groups, df)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º artifact_id –≤ –∫–ª—é—á–µ —Ñ–æ—Ä–º—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        form_key = f"artifact_edit_form_{artifact_id}"
        
        with st.form(form_key):
            edited_values = {}
            
            for group_name, group_cols in char_groups.items():
                group_key = md5(group_name.encode()).hexdigest()[:8]
                with st.expander(group_name, expanded=False):
                    cols = st.columns(2)
                    for idx, col in enumerate(group_cols):
                        if col in df.columns:
                            col_idx = idx % 2
                            with cols[col_idx]:
                                current_val = artifact_row[col] if pd.notna(artifact_row[col]) else None
                                char_display = col.replace("_main", "").replace("_", " ").title()
                                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º artifact_id –≤ –∫–ª—é—á–µ
                                input_key = f"form_{artifact_id}_{col}_{group_key}"

                                new_val = st.number_input(
                                    char_display,
                                    value=float(current_val) if current_val is not None else 0.0,
                                    format="%.3f",
                                    key=input_key,
                                    step=1.0
                                )

                                if new_val == 0.0 and current_val is None:
                                    edited_values[col] = None
                                else:
                                    edited_values[col] = new_val

            # –ú–µ—Ç–∞-–ø–æ–ª—è
            meta_fields = {
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ (RU)",
                "name_eng": "–ù–∞–∑–≤–∞–Ω–∏–µ (EN)",
                "type": "–¢–∏–ø",
                "level": "–£—Ä–æ–≤–µ–Ω—å",
                "main_description": "–û–ø–∏—Å–∞–Ω–∏–µ (RU)",
                "main_description_eng": "–û–ø–∏—Å–∞–Ω–∏–µ (EN)",
                "cost_main": "–°—Ç–æ–∏–º–æ—Å—Ç—å",
            }

            with st.expander("üìÅ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è", expanded=False):
                edited_values["name"] = st.text_input(
                    meta_fields["name"],
                    value=artifact_row.get("name", ""),
                    key=f"meta_name_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )
                edited_values["name_eng"] = st.text_input(
                    meta_fields["name_eng"],
                    value=artifact_row.get("name_eng", ""),
                    key=f"meta_name_eng_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )

                current_val = artifact_row.get("cost_main", None)
                edited_values["cost_main"] = st.number_input(
                    meta_fields["cost_main"],
                    value=float(current_val) if current_val is not None else 0.0,
                    format="%.3f",
                    key=f"meta_cost_main_{artifact_id}",  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                    step=1.0
                )

                type_options = sorted(df["type"].dropna().unique().tolist())
                level_options = sorted(df["level"].dropna().unique().tolist())

                edited_values["type"] = st.selectbox(
                    meta_fields["type"],
                    options=type_options,
                    index=type_options.index(artifact_row["type"]) if artifact_row["type"] in type_options else 0,
                    key=f"meta_type_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )
                edited_values["level"] = st.selectbox(
                    meta_fields["level"],
                    options=level_options,
                    index=level_options.index(artifact_row["level"]) if artifact_row["level"] in level_options else 0,
                    key=f"meta_level_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )

                edited_values["main_description"] = st.text_area(
                    meta_fields["main_description"],
                    value=str(artifact_row.get("main_description", "")),
                    height=150,
                    key=f"meta_desc_ru_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )
                edited_values["main_description_eng"] = st.text_area(
                    meta_fields["main_description_eng"],
                    value=str(artifact_row.get("main_description_eng", "")),
                    height=150,
                    key=f"meta_desc_en_{artifact_id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
                )

            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            if submitted:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º DataFrame
                for col, val in edited_values.items():
                    st.session_state.df_data.loc[original_idx, col] = val
                st.success(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç '{selected_art}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
                st.rerun()

    # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π ===
    st.markdown("## üìã –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    st.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è¬ª. –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.")

    not_number_cols = [
        "artifact_id", "artifact", "name", "type", "level", "new_artefact",
        "description_old", "main_description", "extra_text",
        "name_eng", "main_description_eng", "extra_text_term", "extra_text_eng",
        "extra_text_term_eng", "description_new", "description_new_eng"
    ]

    # –§–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π df –≤ session_state, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    st.session_state.filtered_df = filtered.copy()

    with st.form("artifact_table_edit_form", clear_on_submit=False):
        edited_df = st.data_editor(
            st.session_state.filtered_df.reset_index(drop=True),
            use_container_width=True,
            num_rows="dynamic",
            disabled=["artifact_id", "artifact", "name", "new_artefact"],
            column_config={
                col: st.column_config.NumberColumn(col, format="%.3f")
                for col in st.session_state.filtered_df.columns
                if col not in not_number_cols
            },
            hide_index=True,
            key="artifact_table_editor",
        )

        save_table = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ç–∞–±–ª–∏—Ü–∞)")

    if save_table:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å artifact_id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if "artifact_id" not in edited_df.columns:
            st.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ artifact_id")
            return
            
        original = st.session_state.df_data.set_index("artifact_id")
        updated = edited_df.set_index("artifact_id")

        for aid in updated.index.intersection(original.index):
            diffs = updated.loc[aid] != original.loc[aid]
            if diffs.any():
                for col in diffs.index[diffs]:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ artifact_id, –∞ –Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                    st.session_state.df_data.loc[
                        st.session_state.df_data["artifact_id"] == aid, col
                    ] = updated.loc[aid, col]

        st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üéâ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π df
        df = st.session_state.df_data
        st.session_state.filtered_df = df.copy()
        st.rerun()


def balance_notes_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
    st.header("üìî –ó–∞–º–µ—Ç–∫–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É")
    
    notes = load_balance_notes()
    
    tab1, tab2, tab3 = st.tabs(["üéØ –ü–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º", "üì¶ –ü–æ —Ç–∏–ø–∞–º", "üìã –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã"])
    
    with tab1:
        st.subheader("–ó–∞–º–µ—Ç–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º")
        
        artifact_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", df['name'].tolist())
        current_note = notes["artifacts"].get(artifact_name, "")
        
        new_note = st.text_area(
            f"–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è {artifact_name}",
            value=current_note,
            height=150,
            key=f"note_artifact_{artifact_name}"
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", key="save_artifact_note"):
            notes["artifacts"][artifact_name] = new_note
            save_balance_notes(notes)
            st.success("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    with tab2:
        st.subheader("–ó–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        
        artifact_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", df['type'].dropna().unique().tolist())
        current_note = notes["types"].get(artifact_type, "")
        
        new_note = st.text_area(
            f"–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–∏–ø–∞ {artifact_type}",
            value=current_note,
            height=150,
            key=f"note_type_{artifact_type}"
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", key="save_type_note"):
            notes["types"][artifact_type] = new_note
            save_balance_notes(notes)
            st.success("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    with tab3:
        st.subheader("–û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–∞–ª–∞–Ω—Å–∞")
        
        # principles = """
        # ### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–∞–ª–∞–Ω—Å–∞:
        
        # 1. **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è vs –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å** 
        #    - –£–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–ª—å–Ω–µ–µ –≤ —Å–≤–æ–µ–π –Ω–∏—à–µ
        #    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–ª–∞–±–µ–µ, –Ω–æ –≥–∏–±—á–µ
        
        # 2. **Risk/Reward** 
        #    - –°–∏–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—Ç—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏
        #    - –ß–µ–º –≤—ã—à–µ —Ä–∏—Å–∫, —Ç–µ–º –≤—ã—à–µ –Ω–∞–≥—Ä–∞–¥–∞
        
        # 3. **–°–∏–Ω–µ—Ä–≥–∏—è —Ç–∏–ø–æ–≤** 
        #    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        #    - –ò–∑–±–µ–≥–∞—Ç—å "must-have" –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        
        # 4. **–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —É—Ä–æ–≤–Ω–µ–π** 
        #    - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞–º–µ—Ç–Ω–æ –ª—É—á—à–µ
        #    - –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–∏–º—ã–º –∞–ø–≥—Ä–µ–π–¥–æ–º
        
        # 5. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏–ª–¥—ã** 
        #    - –ù–µ—Å–∫–æ–ª—å–∫–æ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–±–æ—Ä–∫–∏
        #    - –ù–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        # """
        
        # st.markdown(principles)
        
        general_notes = st.text_area(
            "–í–∞—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É",
            value=notes.get("general", ""),
            height=200
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–µ –∑–∞–º–µ—Ç–∫–∏", key="save_general_notes"):
            notes["general"] = general_notes
            save_balance_notes(notes)
            st.success("–ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def combination_optimizer_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
    st.header("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã")
        
        filter_col1, filter_col2 = st.columns(2)
        with filter_col1:
            filter_types = st.multiselect("–¢–∏–ø—ã", df['type'].dropna().unique().tolist())
        with filter_col2:
            filter_levels = st.multiselect("–£—Ä–æ–≤–Ω–∏", df['level'].dropna().unique().tolist())
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        available_df = df.copy()
        if filter_types:
            available_df = available_df[available_df['type'].isin(filter_types)]
        if filter_levels:
            available_df = available_df[available_df['level'].isin(filter_levels)]
        
        # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        selected_artifacts = st.multiselect(
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã",
            available_df['name'].tolist(),
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
        )
        
        if selected_artifacts:
            available_df = available_df[available_df['name'].isin(selected_artifacts)]
    
    with col2:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        num_artifacts = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", 1, 5, 3)
        
        optimization_goal = st.selectbox(
            "–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å", "–ë–∞–ª–∞–Ω—Å", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã", "–ö–∞—Å—Ç–æ–º–Ω–∞—è"]
        )
        
        if optimization_goal == "–ö–∞—Å—Ç–æ–º–Ω–∞—è":
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∏–∂–µ")

        max_combinations = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞",
            min_value=100,
            max_value=1_000_000_000,
            value=10000,
            step=1000
        )

    if st.button("üöÄ –ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", type="primary"):
        if len(available_df) < num_artifacts:
            st.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_df)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {num_artifacts}")
        else:
            find_optimal_combinations(available_df, num_artifacts, optimization_goal, max_combinations=max_combinations)

def find_optimal_combinations(df, num_artifacts, goal, max_combinations=10000):
    """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º weights –∏ abs_weights"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
    goal_weights = {
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å": {
            'bleeding_restore_speed_main': 2.0,
            "bleeding_restore_speed_hard_main": 2.0,
            'health_restore_speed_main':    2.0,
            'power_restore_speed_main':     0.25,
            'satiety_restore_speed_main':   1.5,
            "eat_thirstiness":              1.5,
            "eat_sleepiness":               3,
            'radiation_restore_speed_main': -3.0,  # –∑–Ω–∞–∫ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –±—É–¥–µ—Ç —É—á—Ç—ë–Ω
            "psy_health_restore_speed":     3,
        },
        # "–ë–∞–ª–∞–Ω—Å": {
        #     # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        # },
        # "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã": {
        #     # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        # }
    }

    weights_sign = {key: 1 if value >= 0 else -1 for key, value in st.session_state.STATS_WEIGHT.items()}

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = [
        col for col in df.select_dtypes(include=[np.number]).columns
        if col not in ['artifact_id', 'cost_main', 'tier_main', 'af_rank_main']
    ]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    numeric_data = df[numeric_cols].to_numpy(dtype=float)
    artifact_names = df['name'].to_numpy()
    artifact_types = df['type'].to_numpy() if "type" in df.columns else np.array(["‚Äî"] * len(df))
    artifact_levels = df['level'].to_numpy() if "level" in df.columns else np.array(["‚Äî"] * len(df))


    artifact_indices = df.index.tolist()
    total_combinations = np.math.comb(len(artifact_indices), num_artifacts)

    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞
    if total_combinations > max_combinations:
        st.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ({total_combinations}). –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ {max_combinations}")
        all_indices = np.arange(len(df))
        sampled_combos = [tuple(np.random.choice(all_indices, num_artifacts, replace=False)) for _ in range(max_combinations)]
    else:
        sampled_combos = list(combinations(range(len(df)), num_artifacts))

    results = []
    progress_bar = st.progress(0)

    for idx, combo in enumerate(sampled_combos, 1):
        combo_array = numeric_data[list(combo), :]
        combo_stats_arr = np.nansum(combo_array, axis=0)
        combo_stats = dict(zip(numeric_cols, combo_stats_arr))

        combo_names = artifact_names[list(combo)].tolist()

        # –ü–æ–¥—Å—á—ë—Ç score
        score = 0.0

        # –û–±—ã—á–Ω—ã–µ weights
        for col, weight in st.session_state.STATS_WEIGHT.items():
            val = combo_stats.get(col, 0)
            if pd.notna(val):
                score += val * weight

        # abs_weights –ª–æ–≥–∏–∫–∞
        for col, weight in st.session_state.STAT_ABS_WEIGHT.items():
            val = combo_stats.get(col, 0)
            if pd.isna(val):
                continue
            if val > 0:
                score += val * weight
            else:
                score += ((val + 1) * -1) * weight

        # –¶–µ–ª—å
        if goal == "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å":
            score += sum(combo_stats.get(col, 0) * weight
                         for col, weight in goal_weights["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å"].items())
        elif goal == "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã":
            score += -sum(val for val in combo_stats.values() if val < 0)
        else:  # –ë–∞–ª–∞–Ω—Å
            positive = sum(val for val in combo_stats.values() if val > 0)
            negative = sum(abs(val) for val in combo_stats.values() if val < 0)
            score += positive - negative * 0.5

        results.append({
            'combo': combo_names,
            'score': score,
            'stats': combo_stats
        })

        progress_bar.progress(idx / max_combinations if total_combinations > max_combinations else idx / total_combinations)

    progress_bar.empty()

    results.sort(key=lambda x: x['score'], reverse=True)

    st.subheader(f"üèÜ –¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —Ü–µ–ª–∏: {goal}")
    for i, result in enumerate(results[:10], 1):
        with st.expander(f"#{i} –ö–æ–º–±–∏–Ω–∞—Ü–∏—è (—Å—á–µ—Ç: {result['score']:.2f})"):
            st.write("**–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:**")
            for artifact_name in result['combo']:
                idx = np.where(artifact_names == artifact_name)[0][0]
                artifact_type = artifact_types[idx]
                artifact_level = artifact_levels[idx]
                st.markdown(f"**{artifact_name}** _({artifact_type} | {artifact_level})_")

            st.write("**–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")
            sorted_stats = sorted(result['stats'].items(), key=lambda x: abs(x[1]), reverse=True)
            positive_stats = [(k, v) for k, v in sorted_stats if v * weights_sign.get(k, 1) > 0]
            negative_stats = [(k, v) for k, v in sorted_stats if v * weights_sign.get(k, 1) < 0]

            col1, col2 = st.columns(2)
            with col1:
                st.write("‚úÖ **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ:**")
                for stat, val in positive_stats:
                    st.write(f"- {stat}: +{val:.3f}")
            with col2:
                st.write("‚ùå **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ:**")
                for stat, val in negative_stats:
                    st.write(f"- {stat}: {val:.3f}")

def balance_analyzer_tab(df: pd.DataFrame):
    """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –±–∞–ª–∞–Ω—Å–∞ —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤"""
    st.header("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –±–∞–ª–∞–Ω—Å–∞")

    # --- –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ score ---
    scored_df = compute_artifact_scores(df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ignore_cols = ['artifact_id', 'cost_main', 'jump_height_main', 'tier_main', 'af_rank_main']
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    numeric_cols = [col for col in numeric_cols if col not in ignore_cols]

    # --------------------------
    # –ê–Ω–∞–ª–∏–∑ 1: –ë–∞–ª–∞–Ω—Å –ø–æ —Ç–∏–ø–∞–º
    # --------------------------
    st.subheader("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")

    type_stats = (
        scored_df.groupby("type")
        .agg(
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("artifact_id", "count"),
            –°—Ä–µ–¥–Ω–∏–µ_–ø–ª—é—Å—ã=("positive_score", "mean"),
            –°—Ä–µ–¥–Ω–∏–µ_–º–∏–Ω—É—Å—ã=("negative_score", "mean"),
            –ë–∞–ª–∞–Ω—Å=("total_score", "mean"),
        )
        .reset_index()
    )

    # "–î–ª–∏–Ω–Ω—ã–π" —Ñ–æ—Ä–º–∞—Ç
    plot_df = type_stats.melt(
        id_vars=["type", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
        value_vars=["–°—Ä–µ–¥–Ω–∏–µ_–ø–ª—é—Å—ã", "–°—Ä–µ–¥–Ω–∏–µ_–º–∏–Ω—É—Å—ã", "–ë–∞–ª–∞–Ω—Å"],
        var_name="–ú–µ—Ç—Ä–∏–∫–∞",
        value_name="–ó–Ω–∞—á–µ–Ω–∏–µ"
    )

    # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
    color_map = {
        "–°—Ä–µ–¥–Ω–∏–µ_–ø–ª—é—Å—ã": "#7fc97f",  # –º—è–≥–∫–∏–π –∑–µ–ª—ë–Ω—ã–π
        "–°—Ä–µ–¥–Ω–∏–µ_–º–∏–Ω—É—Å—ã": "#f87c7c",  # –º—è–≥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
        "–ë–∞–ª–∞–Ω—Å": "#7c9df8"          # –º—è–≥–∫–∏–π —Å–∏–Ω–∏–π
    }

    fig = px.bar(
        plot_df,
        x="type",
        y="–ó–Ω–∞—á–µ–Ω–∏–µ",
        color="–ú–µ—Ç—Ä–∏–∫–∞",
        barmode="group",
        color_discrete_map=color_map,
        hover_data=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    )

    fig.update_layout(
        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª—é—Å–æ–≤, –º–∏–Ω—É—Å–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
        xaxis_title="–¢–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        legend_title="–ú–µ—Ç—Ä–∏–∫–∞",
        bargap=0.25,
        height=500
    )

    # –ü–æ–¥–ø–∏—Å–∏ –ø–æ–¥ 90 –≥—Ä–∞–¥—É—Å–æ–≤
    fig.update_xaxes(tickangle=-90)

    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.dataframe(type_stats, use_container_width=True)

    # --------------------------
    # –ê–Ω–∞–ª–∏–∑ 2: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    # --------------------------
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º")

    level_analysis = (
        scored_df.groupby("level")
        .agg(
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("artifact_id", "count"),
            –°—Ä–µ–¥–Ω—è—è_—Å–∏–ª–∞=("total_score", "mean"),
            –°—Ä–µ–¥–Ω—è—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å=("cost_main", "mean"),
        )
        .reset_index()
    )

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π
    level_order = [
        "None", "0", "1", "2", "3", "4", "5", "6",
        "–ë–∞–∑–æ–≤—ã–π", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ú–µ–∑–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ì–∏–ø–µ—Ä–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ê–±—Å–æ–ª—é—Ç"
    ]
    level_analysis["–£—Ä–æ–≤–µ–Ω—å"] = pd.Categorical(level_analysis["level"], categories=level_order, ordered=True)
    level_analysis = level_analysis.sort_values("–£—Ä–æ–≤–µ–Ω—å")
    level_analysis["x"] = level_analysis["–£—Ä–æ–≤–µ–Ω—å"].cat.codes

    plot_df = scored_df.copy()
    plot_df["–£—Ä–æ–≤–µ–Ω—å"] = pd.Categorical(plot_df["level"], categories=level_order, ordered=True)
    plot_df["x"] = plot_df["–£—Ä–æ–≤–µ–Ω—å"].cat.codes

    # –î–∂–∏—Ç—Ç–µ—Ä –¥–ª—è —Ç–æ—á–µ–∫
    np.random.seed(42)
    plot_df["x_jitter"] = plot_df["x"] + np.random.uniform(-0.2, 0.2, size=len(plot_df))

    # --- –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–µ–∫ ---
    fig = px.scatter(
        plot_df,
        x="x_jitter",
        y="total_score",
        color="level",
        hover_data=["artifact_id", "name", "level", "total_score", "cost_main"],
        opacity=0.7
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ
    fig.add_trace(go.Scatter(
        x=level_analysis["x"],
        y=level_analysis["–°—Ä–µ–¥–Ω—è—è_—Å–∏–ª–∞"],
        mode="lines+markers",
        name="–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞",
        line=dict(color="#FC5F5F", width=2),
        marker=dict(size=10, color="#FECE74"),
        hovertemplate="–£—Ä–æ–≤–µ–Ω—å: %{x}<br>–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: %{y:.2f}<extra></extra>"
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ X (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å —É—Ä–æ–≤–Ω–∏, –∞ –Ω–µ —á–∏—Å–ª–∞)
    fig.update_xaxes(
        tickvals=list(range(len(level_order))),
        ticktext=level_order
    )

    fig.update_layout(
        title="–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–∏–ª—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º",
        xaxis_title="–£—Ä–æ–≤–µ–Ω—å",
        yaxis_title="–°–∏–ª–∞ (total_score)",
        hovermode="closest"
    )

    st.plotly_chart(fig, use_container_width=True)

    # --------------------------
    # –ê–Ω–∞–ª–∏–∑ 3: –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    # --------------------------
    st.subheader("‚ùì –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")

    with st.expander("–¢–∞–±–ª–∏—Ü–∞", expanded=False):
        min_percent = 10
        char_usage = []
        for col in numeric_cols:
            non_zero = (df[col].notna() & (df[col] != 0)).sum()
            usage_percent = (non_zero / len(df)) * 100

            if usage_percent < min_percent:
                char_usage.append({
                    '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': col,
                    '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ %': usage_percent,
                    '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤': non_zero
                })

        if char_usage:
            st.text(f"–°—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç—Å—è —É –º–µ–Ω–µ–µ {min_percent}% –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
            char_usage_df = pd.DataFrame(char_usage).sort_values('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ %')
            st.dataframe(char_usage_df, use_container_width=True)
        else:
            st.info("–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")

    # --------------------------
    # –ê–Ω–∞–ª–∏–∑ 4: –í—ã–±—Ä–æ—Å—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    # --------------------------
    st.subheader("üìä –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã-–≤—ã–±—Ä–æ—Å—ã")
    with st.expander("–¢–∞–±–ª–∏—Ü–∞", expanded=False):
        outliers = []
        for col in numeric_cols:
            if df[col].notna().sum() > 0:
                mean = df[col].mean()
                std = df[col].std()

                if std > 0:
                    for idx, row in df.iterrows():
                        val = row[col]
                        if pd.notna(val) and val != 0:
                            z_score = abs((val - mean) / std)
                            if z_score > 2:
                                outliers.append({
                                    '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç': row['name'],
                                    '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': col,
                                    '–ó–Ω–∞—á–µ–Ω–∏–µ': val,
                                    'Z-score': z_score,
                                    '–¢–∏–ø': row['type'],
                                    '–£—Ä–æ–≤–µ–Ω—å': row['level']
                                })

        if outliers:
            outliers_df = pd.DataFrame(outliers).sort_values('Z-score', ascending=False)
            st.text(f"–ö–æ–ª-–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers_df)} –∏–∑ {len(df)} ({len(outliers_df) / len(df):.2%})")
            st.dataframe(outliers_df.head(50), use_container_width=True)
        else:
            st.info("–í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    # --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (—Å —É—á—ë—Ç–æ–º NaN –∏ —Ñ–ª–∞–≥–æ–º) ---
    st.subheader("üß© –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    all_char_cols = IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS
    available_cols = [col for col in all_char_cols if col in df.columns]

    if not available_cols:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    else:
        selected_cols = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=available_cols,
            default=available_cols[:3] if len(available_cols) >= 3 else available_cols
        )

        # –§–ª–∞–≥: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∏ –Ω–µ-NaN
        show_only_nonzero = st.checkbox(
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å 0 –∏ NaN)",
            value=True,
            help="–ï—Å–ª–∏ —Å–Ω—è—Ç—å ‚Äî –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –≤–∫–ª—é—á–∞—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0 –∏–ª–∏ NaN (–æ–Ω–∏ –±—É–¥—É—Ç —Å–µ—Ä—ã–º–∏ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã)."
        )
        
        # --- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π: "1" ‚Üí "1 —É—Ä.", "2" ‚Üí "2 —É—Ä." –∏ —Ç.–¥. ---
        level_mapping = {
            "1": "1 —É—Ä.",
            "2": "2 —É—Ä.",
            "3": "3 —É—Ä.",
            "4": "4 —É—Ä.",
            "5": "5 —É—Ä.",
            "6": "6 —É—Ä."
        }

        if selected_cols:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            working_df = df.copy()
            working_df['level'] = working_df['level'].replace(level_mapping)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞
            if show_only_nonzero:
                # –§–∏–ª—å—Ç—Ä—É–µ–º: –Ω–µ-NaN –ò –Ω–µ 0 —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
                mask = working_df[selected_cols].notna().any(axis=1) & working_df[selected_cols].ne(0).any(axis=1)
                filtered_df = working_df[mask].copy()
                filter_note = " (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∏ –Ω–µ-NaN)"
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë, –Ω–æ –¥–æ–±–∞–≤–∏–º —Å—Ç–æ–ª–±–µ—Ü-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                filtered_df = working_df.copy()
                # –î–æ–±–∞–≤–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è
                for col in selected_cols:
                    filtered_df[f"{col}_valid"] = filtered_df[col].notna() & (filtered_df[col] != 0)
                filter_note = " (–≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–µ—Ä—ã–º ‚Äî 0 –∏–ª–∏ NaN)"

            if filtered_df.empty:
                st.info(f"–ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤{filter_note} –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_cols = ['name', 'type', 'level'] + selected_cols
                if not show_only_nonzero:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                    display_cols += [f"{col}_valid" for col in selected_cols]
                display_df = filtered_df[display_cols].copy()

                # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                sort_by = st.selectbox(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
                    options=selected_cols,
                    index=0
                )
                sort_order = st.radio("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"], horizontal=True)
                ascending = sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º, –Ω–æ NaN/0 –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º)
                display_df = display_df.sort_values(by=sort_by, ascending=ascending, na_position='last')

                st.write(f"### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ: `{sort_by}`{filter_note}")
                st.dataframe(display_df.reset_index(drop=True), use_container_width=True)

                # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π ===
                st.markdown("## üìã –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
                st.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è¬ª. –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.")

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –Ω–æ –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                info_cols = [
                    "artifact_id", "name", "type", "level", "main_description",
                    # "artifact", "new_artefact",
                    # "description_old", "main_description", "extra_text",
                    # "name_eng", "main_description_eng", "extra_text_term", "extra_text_eng",
                    # "extra_text_term_eng", "description_new", "description_new_eng"
                ]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:
                # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (–≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ filtered_df)
                # 2. –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (selected_cols)
                editor_cols = []
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                for col in info_cols:
                    if col in filtered_df.columns and col not in editor_cols:
                        editor_cols.append(col)
                # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                for col in selected_cols:
                    if col not in editor_cols:
                        editor_cols.append(col)

                if "artifact_id" not in filtered_df.columns:
                    st.error("‚ùå –û—à–∏–±–∫–∞: –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'artifact_id'. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                else:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ display_df
                    edit_view_df = filtered_df[editor_cols].copy()
                    if sort_by in editor_cols:
                        edit_view_df = edit_view_df.sort_values(by=sort_by, ascending=ascending, na_position='last')
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ display_df
                        edit_view_df = edit_view_df.reindex(display_df.index).reset_index(drop=True)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                    st.session_state.filtered_df_edit = edit_view_df.copy()

                    with st.form("artifact_table_edit_form_balance", clear_on_submit=False):
                        edited_df = st.data_editor(
                            st.session_state.filtered_df_edit.reset_index(drop=True),
                            use_container_width=True,
                            num_rows="dynamic",
                            disabled=info_cols,  # ‚Üê –ó–ê–ü–†–ï–©–ê–ï–ú —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                            column_config={
                                col: st.column_config.NumberColumn(col, format="%.3f")
                                for col in selected_cols  # ‚Üê –¢–æ–ª—å–∫–æ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∫–ª—é—á–∞–µ–º NumberColumn
                                if col in edit_view_df.select_dtypes(include=[np.number]).columns
                            },
                            hide_index=True,
                            key="artifact_table_editor_balance",
                        )

                        save_table = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ç–∞–±–ª–∏—Ü–∞)")

                    if save_table:
                        if "artifact_id" not in edited_df.columns:
                            st.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ artifact_id")
                        elif 'df_data' not in st.session_state:
                            st.error("‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ session_state")
                        else:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ‚Äî –¢–û–õ–¨–ö–û selected_cols (–∏ artifact_id –¥–ª—è —Å–≤—è–∑–∏)
                            safe_editable_cols = [col for col in selected_cols if col in edited_df.columns]
                            safe_cols = ["artifact_id"] + safe_editable_cols

                            # –û–±—Ä–µ–∑–∞–µ–º edited_df –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                            edited_df = edited_df[safe_cols]

                            original_full = st.session_state.df_data.set_index("artifact_id")
                            edited_df = edited_df.set_index("artifact_id")

                            changes_made = False
                            for aid in edited_df.index:
                                if aid in original_full.index:
                                    common_cols = edited_df.columns.intersection(original_full.columns)
                                    if len(common_cols) == 0:
                                        continue

                                    edited_row = edited_df.loc[aid, common_cols]
                                    original_row = original_full.loc[aid, common_cols]

                                    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
                                    edited_row = edited_row.reindex(common_cols)
                                    original_row = original_row.reindex(common_cols)

                                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—á—ë—Ç–æ–º NaN
                                    diff_mask = ~((edited_row == original_row) | (edited_row.isna() & original_row.isna()))
                                    changed_cols = diff_mask[diff_mask].index.tolist()

                                    if changed_cols:
                                        changes_made = True
                                        for col in changed_cols:
                                            st.session_state.df_data.loc[
                                                st.session_state.df_data["artifact_id"] == aid, col
                                            ] = edited_row[col]

                            if changes_made:
                                st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                                df = st.session_state.df_data.copy()
                                st.rerun()
                            else:
                                st.info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

                # --- –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π ---
                for col in selected_cols:
                    st.write(f"#### üìà –ó–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: `{col}`{filter_note}")

                    # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π, –≥–¥–µ level —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
                    plot_df = filtered_df.copy()

                    if show_only_nonzero:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-NaN
                        plot_df = plot_df[plot_df[col].notna()].copy()
                    else:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë, –Ω–æ –±—É–¥–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
                        pass

                    if len(plot_df) == 0:
                        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ `{col}`.")
                        continue

                    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü–æ —É—Ä–æ–≤–Ω—è–º
                    
                    # if not show_only_nonzero:
                    #     # –¶–≤–µ—Ç –ø–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                    #     color_col = f"{col}_valid"
                    #     color_map = {True: 'blue', False: 'lightgrey'}
                    #     title_suffix = " (—Å–∏–Ω–∏–µ ‚Äî –≤–∞–ª–∏–¥–Ω—ã–µ, —Å–µ—Ä—ã–µ ‚Äî 0/NaN)"
                    # else:
                    color_col = "type"
                    color_map = None
                    title_suffix = ""

                    # --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ (—Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–∏—è–º) ---
                    valid_mask = plot_df[col].notna()
                    valid_count = valid_mask.sum()
                    total_items = len(df)  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ

                    non_zero_and_valid_mask = (plot_df[col].astype(int) != 0) & valid_mask
                    non_zero_count = non_zero_and_valid_mask.sum()
                    non_zero_pct_of_total = (non_zero_count / total_items) * 100 if total_items > 0 else 0

                    positive_mask = (plot_df[col] > 0) & valid_mask
                    negative_mask = (plot_df[col] < 0) & valid_mask

                    pos_count = positive_mask.sum()
                    neg_count = negative_mask.sum()

                    pos_pct_of_valid = (pos_count / non_zero_count * 100) if non_zero_count > 0 else 0
                    neg_pct_of_valid = (neg_count / non_zero_count * 100) if non_zero_count > 0 else 0

                    col_stats = plot_df[col].describe(percentiles=[.1, .25, .5, .75, .9])

                    st.write(f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ `{col}` (–Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–∏—è)**")
                    stat_cols = st.columns(5)
                    stat_cols[0].metric("–°—Ä–µ–¥–Ω–µ–µ", f"{col_stats['mean']:.2f}" if not pd.isna(col_stats['mean']) else "‚Äî")
                    stat_cols[1].metric("–ú–µ–¥–∏–∞–Ω–∞", f"{col_stats['50%']:.2f}" if not pd.isna(col_stats['50%']) else "‚Äî")
                    stat_cols[2].metric("–ù–µ–Ω—É–ª–µ–≤—ã—Ö", f"{non_zero_count} ({non_zero_pct_of_total:.1f}% –æ—Ç –≤—Å–µ—Ö)")
                    stat_cols[3].metric("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö", f"{pos_count} ({pos_pct_of_valid:.1f}%)")
                    stat_cols[4].metric("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö", f"{neg_count} ({neg_pct_of_valid:.1f}%)")

                    with st.expander(f"üìà –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ `{col}`"):
                        perc_df = pd.DataFrame({
                            '–ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å': ['10%', '25%', '50%', '75%', '90%'],
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                                f"{col_stats['10%']:.2f}" if not pd.isna(col_stats['10%']) else "‚Äî",
                                f"{col_stats['25%']:.2f}" if not pd.isna(col_stats['25%']) else "‚Äî",
                                f"{col_stats['50%']:.2f}" if not pd.isna(col_stats['50%']) else "‚Äî",
                                f"{col_stats['75%']:.2f}" if not pd.isna(col_stats['75%']) else "‚Äî",
                                f"{col_stats['90%']:.2f}" if not pd.isna(col_stats['90%']) else "‚Äî"
                            ]
                        })
                        st.table(perc_df)

                        top_n = 10

                        top_positive = plot_df[positive_mask].nlargest(top_n, col)[['name', 'type', 'level', col]]
                        top_negative = plot_df[negative_mask].nsmallest(top_n, col)[['name', 'type', 'level', col]]

                        st.write(f"**üîù –¢–æ–ø-{top_n} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö:**")
                        st.dataframe(top_positive, use_container_width=True)
                        st.write(f"**üîª –¢–æ–ø-{top_n} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö:**")
                        st.dataframe(top_negative, use_container_width=True)

                    with st.expander(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π {col} –ø–æ —É—Ä–æ–≤–Ω—è–º{title_suffix}", expanded=False):
                        fig1 = px.strip(
                            plot_df,
                            x=col,
                            y="level",
                            color=color_col if not show_only_nonzero else "type",
                            hover_data=["name", "type", "level"],
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π {col} –ø–æ —É—Ä–æ–≤–Ω—è–º{title_suffix}",
                            orientation="h",
                            color_discrete_map=color_map
                        )
                        fig1.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="0", annotation_position="top left")
                        fig1.update_layout(height=600)
                        st.plotly_chart(fig1, use_container_width=True)

                    with st.expander(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π {col} –ø–æ —Ç–∏–ø–∞–º{title_suffix}", expanded=False):
                        # –ì—Ä–∞—Ñ–∏–∫ 2: –ü–æ —Ç–∏–ø–∞–º
                        fig2 = px.strip(
                            plot_df,
                            x=col,
                            y="type",
                            color="level", # if show_only_nonzero else color_col,
                            hover_data=["name", "type", "level"],
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π {col} –ø–æ —Ç–∏–ø–∞–º{title_suffix}",
                            orientation="h",
                            color_discrete_map=color_map if not show_only_nonzero else None
                        )
                        fig2.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="0", annotation_position="top left")
                        fig2.update_layout(height=500)
                        st.plotly_chart(fig2, use_container_width=True)

        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    # --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (—Å —Ñ–ª–∞–≥–æ–º) ---
    st.subheader("üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º")

    global_stats = []
    for col in all_char_cols:
        if col not in df.columns:
            continue

        total_items = len(df)

        # –¢–æ–ª—å–∫–æ –Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–∏—è
        valid_mask = df[col].notna()
        valid_count = valid_mask.sum()
        valid_pct = (valid_count / total_items) * 100 if total_items > 0 else 0

        # –°—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö ‚Äî –Ω–µ–Ω—É–ª–µ–≤—ã–µ
        non_zero_mask = (df[col] != 0) & valid_mask
        non_zero_count = non_zero_mask.sum()
        non_zero_pct_of_total = (non_zero_count / total_items) * 100 if total_items > 0 else 0

        positive_mask = (df[col] > 0) & valid_mask
        negative_mask = (df[col] < 0) & valid_mask

        pos_count = positive_mask.sum()
        neg_count = negative_mask.sum()

        pos_pct_of_valid = (pos_count / valid_count * 100) if valid_count > 0 else 0
        neg_pct_of_valid = (neg_count / valid_count * 100) if valid_count > 0 else 0

        mean_val = df[col].mean() if valid_count > 0 else float('nan')
        median_val = df[col].median() if valid_count > 0 else float('nan')

        global_stats.append({
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': col,
            '–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤': total_items,
            '–ù–µ-NaN –∑–Ω–∞—á–µ–Ω–∏–π': valid_count,
            '% –æ—Ç –≤—Å–µ—Ö': f"{valid_pct:.1f}%",
            '–ù–µ–Ω—É–ª–µ–≤—ã—Ö (–∏–∑ –Ω–µ-NaN)': non_zero_count,
            '% –æ—Ç –≤—Å–µ—Ö': f"{non_zero_pct_of_total:.1f}%",
            '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö': pos_count,
            '% –æ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö': f"{pos_pct_of_valid:.1f}%",
            '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö': neg_count,
            '% –æ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö (–æ—Ç—Ä–∏—Ü.)': f"{neg_pct_of_valid:.1f}%",
            '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': f"{mean_val:.2f}" if not pd.isna(mean_val) else "‚Äî",
            '–ú–µ–¥–∏–∞–Ω–∞': f"{median_val:.2f}" if not pd.isna(median_val) else "‚Äî"
        })

    if global_stats:
        global_df = pd.DataFrame(global_stats)
        global_df = global_df.sort_values('–ù–µ-NaN –∑–Ω–∞—á–µ–Ω–∏–π', ascending=False)
        st.dataframe(global_df, use_container_width=True)

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å —Ñ–ª–∞–≥–æ–º
        st.write("### üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º")
        char_for_graph = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:",
            options=[col for col in all_char_cols if col in df.columns],
            index=0,
            key="global_char_select"
        )

        show_only_nonzero_global = st.checkbox(
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
            value=True,
            key="global_nonzero_filter"
        )

        if char_for_graph:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
            graph_df = df.copy()
            graph_df['level'] = graph_df['level'].replace(level_mapping)

            if show_only_nonzero_global:
                graph_df = graph_df[graph_df[char_for_graph].notna() & (graph_df[char_for_graph] != 0)].copy()
                graph_note = " (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∏ –Ω–µ-NaN)"
            else:
                graph_note = " (–≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã)"

            if len(graph_df) == 0:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö{graph_note} –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ `{char_for_graph}`.")
            else:
                graph_df = graph_df.sort_values(by=char_for_graph, ascending=True).reset_index(drop=True)

                fig_detail = px.scatter(
                    graph_df,
                    x=char_for_graph,
                    y=graph_df.index,
                    color="type",
                    symbol="level",
                    hover_data=["name", "type", "level", char_for_graph],
                    title=f"–ó–Ω–∞—á–µ–Ω–∏—è {char_for_graph} –ø–æ –≤—Å–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º{graph_note}",
                    labels={"y": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç (–∏–Ω–¥–µ–∫—Å)"}
                )
                fig_detail.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="0", annotation_position="top left")
                fig_detail.update_layout(height=800, showlegend=True)
                fig_detail.update_traces(marker_size=10)
                st.plotly_chart(fig_detail, use_container_width=True)

                with st.expander("üìä –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"):
                    fig_bar = px.bar(
                        graph_df,
                        y="name",
                        x=char_for_graph,
                        color="type",
                        hover_data=["level", "type"],
                        orientation='h',
                        title=f"–ó–Ω–∞—á–µ–Ω–∏—è {char_for_graph} –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º{graph_note}",
                        height=max(600, len(graph_df) * 25)
                    )
                    fig_bar.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="0", annotation_position="top right")
                    st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.info("–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")


def general_info(df):
    st.subheader("üìå –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º")
    total_arts = len(df)
    total_types = df["type"].nunique()
    total_levels = df["level"].nunique()
    
    col1, col2, col3 = st.columns(3)
    col1.metric("–í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", total_arts)
    col2.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤", total_types)
    col3.metric("–£—Ä–æ–≤–Ω–µ–π", total_levels)
    
    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
    st.markdown("### üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    cols = st.columns(4)
    if "cost_main" in df:
        cols[0].metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{df['cost_main'].mean():.1f}")
    if "tier_main" in df:
        cols[1].metric("–°—Ä–µ–¥–Ω–∏–π Tier", f"{df['tier_main'].mean():.2f}")
    if "af_rank_main" in df:
        cols[2].metric("–°—Ä–µ–¥–Ω–∏–π Rank", f"{df['af_rank_main'].mean():.2f}")
    
    scored_df = compute_artifact_scores(df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)
    cols[3].metric("–°—Ä–µ–¥–Ω–∏–π Score", f"{scored_df['total_score'].mean():.2f}")

    # üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å —É—á—ë—Ç–æ–º –Ω–æ–≤—ã—Ö
    st.markdown("### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º")

    def transform_level_column(df: pd.DataFrame) -> tuple[pd.DataFrame, list[str]]:
        df = df.copy()

        def transform_level(val):
            val_str = str(val).strip()
            return f"–£—Ä. {val_str}" if val_str.isdigit() else val_str

        df["level"] = df["level"].apply(transform_level)

        # –ü–æ–ª—É—á–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
        level_order = list(dict.fromkeys(df["level"].dropna()))
        df["level"] = pd.Categorical(df["level"], categories=level_order, ordered=True)

        return df, level_order


    # === –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É level ===
    transformed_df, level_order = transform_level_column(df)

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö
    level_stats = (
        transformed_df.groupby("level")
        .agg(
            total_count=("level", "size"),
            new_count=("new_artefact", lambda x: (x == True).sum())
        )
        .reindex(level_order, fill_value=0)
        .reset_index()
    )

    # üìä –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è —Å–µ—Ä–∏—è–º–∏
    fig = px.bar(
        level_stats.melt(id_vars="level", value_vars=["total_count", "new_count"],
                        var_name="–¢–∏–ø", value_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
        x="level",
        y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        color="–¢–∏–ø",
        barmode="group",
        text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        category_orders={"level": level_order},
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º (–≤—Å–µ–≥–æ –∏ –Ω–æ–≤—ã—Ö)"
    )

    st.plotly_chart(fig, use_container_width=True)

    # üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º + –Ω–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º (—Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö)")

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ç–∏–ø–∞–º + new_artefact
    type_counts = (
        df.groupby(["type", "new_artefact"])
        .size()
        .reset_index(name="count")
    )

    # –ß—Ç–æ–±—ã –ª–µ–≥–µ–Ω–¥–∞ –±—ã–ª–∞ –ø–æ–Ω—è—Ç–Ω–æ–π
    type_counts["new_artefact"] = type_counts["new_artefact"].map({True: "–ù–æ–≤—ã–µ", False: "–°—Ç–∞—Ä—ã–µ"})

    fig_type = px.bar(
        type_counts,
        x="type",
        y="count",
        color="new_artefact",   # —Ü–≤–µ—Ç –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É –Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ
        text="count",
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ)",
        barmode="stack"
    )

    st.plotly_chart(fig_type, use_container_width=True)

def weights_editor_tab():
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

    stats_weights = st.session_state.STATS_WEIGHT.copy()
    abs_weights = st.session_state.STAT_ABS_WEIGHT.copy()

    # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tmp_stats = stats_weights.copy()
    tmp_abs = abs_weights.copy()

    def render_group(name, cols, weights, tmp_dict):
        st.subheader(name)
        col1, col2, col3 = st.columns(3)
        cols_split = [col1, col2, col3]

        for i, col in enumerate(cols):
            if col in weights:
                with cols_split[i % 3]:
                    new_val = st.text_input(
                        col,
                        value=str(weights[col]),
                        key=f"{name}_{col}"
                    )
                    try:
                        tmp_dict[col] = float(new_val)
                    except ValueError:
                        tmp_dict[col] = weights[col]

    # --- –ì—Ä—É–ø–ø—ã ---
    render_group("üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç—ã", IMMUNITY_COLS, stats_weights, tmp_stats)
    render_group("üìè –ö–∞–ø—ã", CAP_COLS, stats_weights, tmp_stats)
    render_group("üíâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", RESTORE_COLS, stats_weights, tmp_stats)
    render_group("üß∞ –£—Ç–∏–ª–∏—Ç–∏", UTILITY_COLS, stats_weights, tmp_stats)

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–∞–ø—ã
    render_group("üìå –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–∞–ø—ã", list(abs_weights.keys()), abs_weights, tmp_abs)

    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        st.session_state.STATS_WEIGHT = tmp_stats
        st.session_state.STAT_ABS_WEIGHT = tmp_abs
        st.success("‚úÖ –í–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    weights_data = {
        "STATS_WEIGHT": st.session_state.STATS_WEIGHT,
        "STAT_ABS_WEIGHT": st.session_state.STAT_ABS_WEIGHT,
    }
    weights_json = json.dumps(weights_data, indent=4, ensure_ascii=False)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –≤–µ—Å–∞",
        data=weights_json,
        file_name="weights_config.json",
        mime="application/json"
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å–∞ (JSON)", type="json")
    if uploaded_file is not None:
        try:
            loaded_data = json.load(uploaded_file)
            if "STATS_WEIGHT" in loaded_data and "STAT_ABS_WEIGHT" in loaded_data:
                st.session_state.STATS_WEIGHT = loaded_data["STATS_WEIGHT"]
                st.session_state.STAT_ABS_WEIGHT = loaded_data["STAT_ABS_WEIGHT"]
                st.success("‚úÖ –í–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                st.rerun()
            else:
                st.error("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π (STATS_WEIGHT, STAT_ABS_WEIGHT)")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")



def main():
    st.title("üß™ Artifact Balance Manager - S.T.A.L.K.E.R. Anomaly G.A.M.M.A.")

    if 'df_data' not in st.session_state:
        raw_df = load_data()
        df, char_groups = prepare_data_not_cached(raw_df)
        st.session_state.df_data = df
        st.session_state.char_groups = char_groups
    else:
        df = st.session_state.df_data
        char_groups = st.session_state.char_groups

    if "STATS_WEIGHT" not in st.session_state or "STAT_ABS_WEIGHT" not in st.session_state:
        st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT = get_stats_weights()

    tab_list = [
        "üìù –†–µ–¥–∞–∫—Ç–æ—Ä", 
        "üìä –ì—Ä–∞—Ñ–∏–∫–∏", 
        "üìî –ó–∞–º–µ—Ç–∫–∏",
        "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä",
        "üîç –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞",
        "‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤",
        "üíæ –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç",
    ]

    # –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ (+ –Ω–æ–≤–∞—è)
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs(tab_list)

    with tab1:
        artifact_editor_tab(df, char_groups)

    with tab2:
        render_all_charts(df, char_groups)

    with tab3:
        balance_notes_tab(df)

    with tab4:
        combination_optimizer_tab(df)

    with tab5:
        balance_analyzer_tab(df)

    with tab6:
        general_info(df)

    with tab7:
        weights_editor_tab()

    with tab8:
        export_tab(df)
        

def export_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

    col1, col2 = st.columns(2)

    # ------------------- –≠–ö–°–ü–û–†–¢ -------------------
    with col1:
        st.subheader("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ LTX")

        if st.button("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π LTX"):
            start_time = time.time()

            progress = st.progress(0, text="‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã)")

            # –≠—Ç–∞–ø 1: —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            df_final = finalize_data(st.session_state.df_data)
            progress.progress(50, text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")

            # –≠—Ç–∞–ø 2: —Å–±–æ—Ä–∫–∞ LTX
            buffer, filename = build_artifact_file(df_final)
            progress.progress(100, text="‚úÖ –ì–æ—Ç–æ–≤–æ")

            elapsed = time.time() - start_time
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫.")

            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π LTX",
                data=buffer,
                file_name=filename,
                mime="text/plain"
            )

        st.subheader("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=df.to_csv(index=False).encode("utf-8"),
            file_name=f"artifacts_balanced_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

        st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            stats_data = []
            for idx, row in df.iterrows():
                positive_effects = 0
                negative_effects = 0

                numeric_cols = df.select_dtypes(include=[np.number]).columns
                for col in numeric_cols:
                    if col not in ['artifact_id', 'cost_main', 'tier_main', 'af_rank_main']:
                        val = row[col]
                        if pd.notna(val) and val != 0:
                            if val > 0:
                                positive_effects += 1
                            else:
                                negative_effects += 1

                stats_data.append({
                    'name': row['name'],
                    'type': row['type'],
                    'level': row['level'],
                    'positive_effects_count': positive_effects,
                    'negative_effects_count': negative_effects,
                    'total_effects': positive_effects + negative_effects,
                    'balance_ratio': positive_effects / (negative_effects + 1)
                })

            stats_df = pd.DataFrame(stats_data)
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (CSV)",
                data=stats_df.to_csv(index=False).encode("utf-8"),
                file_name=f"artifacts_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )

        st.subheader("üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
        if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É"):
            start_time = time.time()
            report = generate_balance_report(df)
            elapsed = time.time() - start_time

            st.success(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫.")
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
                data=report.encode("utf-8"),
                file_name=f"balance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )

            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞"):
                st.text(report)

    # ------------------- –ò–ú–ü–û–†–¢ -------------------
    with col2:
        st.subheader("üìã –ò–º–ø–æ—Ä—Ç CSV")

        uploaded_csv = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")
        if uploaded_csv is not None:
            try:
                new_df = pd.read_csv(uploaded_csv)

                required_cols = ["name", "type", "level"]
                missing_cols = [c for c in required_cols if c not in new_df.columns]

                if missing_cols:
                    st.error(f"‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
                else:
                    st.session_state.df_data = new_df
                    _, st.session_state.char_groups = prepare_data_not_cached(new_df)
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–º–µ–Ω–µ–Ω—ã")
                    st.dataframe(new_df.head())
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")


def generate_balance_report(df):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
    report = []
    report.append("="*60)
    report.append("–û–¢–ß–ï–¢ –ü–û –ë–ê–õ–ê–ù–°–£ –ê–†–¢–ï–§–ê–ö–¢–û–í")
    report.append(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append("="*60)
    report.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report.append("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    report.append(f"- –í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {len(df)}")
    report.append(f"- –¢–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {df['type'].nunique()}")
    report.append(f"- –£—Ä–æ–≤–Ω–µ–π: {df['level'].nunique()}")
    report.append("")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    report.append("–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:")
    type_counts = df['type'].value_counts()
    for artifact_type, count in type_counts.items():
        report.append(f"- {artifact_type}: {count} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    report.append("")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    report.append("–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –£–†–û–í–ù–Ø–ú:")
    level_counts = df['level'].value_counts()
    for level, count in level_counts.items():
        report.append(f"- –£—Ä–æ–≤–µ–Ω—å {level}: {count} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    report.append("")
    
    # –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    report.append("–ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    
    usage_stats = []
    for col in numeric_cols:
        if col not in ['artifact_id', 'cost_main', 'tier_main', 'af_rank_main']:
            non_zero = (df[col].notna() & (df[col] != 0)).sum()
            if non_zero > 0:
                usage_stats.append((col, non_zero))
    
    usage_stats.sort(key=lambda x: x[1], reverse=True)
    
    report.append("–¢–æ–ø-10 –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    for char, count in usage_stats[:10]:
        percent = (count / len(df)) * 100
        report.append(f"- {char}: {count} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ({percent:.1f}%)")
    report.append("")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
    report.append("–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ë–ê–õ–ê–ù–°–ê:")
    
    # –ü–æ–∏—Å–∫ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    strong_artifacts = []
    for idx, row in df.iterrows():
        positive_sum = 0
        negative_sum = 0
        
        for col in numeric_cols:
            if col not in ['artifact_id', 'cost_main', 'tier_main', 'af_rank_main']:
                val = row[col]
                if pd.notna(val):
                    if val > 0:
                        positive_sum += val
                    else:
                        negative_sum += abs(val)
        
        balance = positive_sum - negative_sum * 0.5
        if balance > df['cost_main'].mean() * 2:  # –£—Å–ª–æ–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
            strong_artifacts.append((row['name'], balance))
    
    if strong_artifacts:
        report.append("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å–∏–ª–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:")
        for name, score in sorted(strong_artifacts, key=lambda x: x[1], reverse=True)[:5]:
            report.append(f"- {name} (–±–∞–ª–∞–Ω—Å: {score:.2f})")
    report.append("")
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    # report.append("="*60)
    # report.append("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    # report.append("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã-–≤—ã–±—Ä–æ—Å—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞")
    # report.append("2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º")
    # report.append("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω–µ—Ä–≥–∏—é –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    # report.append("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ")
    # report.append("="*60)
    
    return "\n".join(report)

if __name__ == "__main__":
    main()