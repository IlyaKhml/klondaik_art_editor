import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
import numpy as np
from hashlib import md5

from constants import (
    IMMUNITY_COLS, CAP_COLS, RESTORE_COLS, UTILITY_COLS,
    compute_artifact_scores,
)

def render_char_heatmap_by_type(
    df: pd.DataFrame,
    char_groups: dict[str, list[str]],
    agg_mode: str = "sum"  # "sum" –∏–ª–∏ "presence"
):  
    if agg_mode == "sum":
        st.subheader(f"üìä Heatmap –°—É–º–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    else:
        st.subheader(f"üìä Heatmap –ù–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

    if "type" not in df.columns:
        st.warning("–ö–æ–ª–æ–Ω–∫–∞ 'type' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
        return

    df_filtered = df.dropna(subset=["type"])

    for idx, (group_name, selected_cols) in enumerate(char_groups.items()):
        selected_cols = [col for col in selected_cols if col in df_filtered.columns]
        if not selected_cols:
            continue

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
        group_key = md5(group_name.encode()).hexdigest()[:8]

        expanded = False if (st.session_state.selected_level or st.session_state.selected_type) else True

        with st.expander(f"‚ñ∂ {group_name}", expanded=expanded):
            if agg_mode == "sum":
                pivot_df = df_filtered.groupby("type")[selected_cols].sum().T

                fig = px.imshow(
                    pivot_df,
                    labels=dict(x="–¢–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", y="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", color="–°—É–º–º–∞"),
                    aspect="auto",
                    color_continuous_scale="RdBu_r",
                    text_auto=".2f",
                    height=800
                )

            elif agg_mode == "presence":
                # –í—Å–µ —Ç–∏–ø—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                all_types = sorted(df_filtered["type"].dropna().unique())  # –æ—Å—å X
                all_chars = selected_cols                                   # –æ—Å—å Y

                # 1. –ú–∞—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
                presence_df = (df_filtered[all_chars].notna()) & (df_filtered[all_chars] != 0)
                group = df_filtered["type"]

                # 2. –ö–æ–ª-–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–ø–æ –≥—Ä—É–ø–ø–∞–º)
                sum_per_group = presence_df.groupby(group).sum()
                sum_per_group = sum_per_group.reindex(index=all_types, columns=all_chars, fill_value=0)

                # 3. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
                count_per_group = df_filtered.groupby(group).size()
                count_per_group = count_per_group.reindex(all_types, fill_value=0)

                # 4. –ü—Ä–æ—Ü–µ–Ω—Ç (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0)
                normalized_df = sum_per_group.div(count_per_group.replace(0, np.nan), axis=0).fillna(0)
                percentage_df = (normalized_df * 100).round(1)

                # 5. –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                annotations = pd.DataFrame(index=all_types, columns=all_chars)
                for row in all_types:
                    for col in all_chars:
                        present = int(sum_per_group.loc[row, col])
                        total = int(count_per_group[row])
                        percent = percentage_df.loc[row, col]
                        annotations.loc[row, col] = f"{present} –∏–∑ {total}<br>({percent}%)"

                # 6. –ì—Ä–∞—Ñ–∏–∫
                fig = go.Figure(
                    data=go.Heatmap(
                        z=percentage_df.T.values,  # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚Äî –ø–æ Y
                        x=percentage_df.index,
                        y=percentage_df.columns,
                        text=annotations.T.values,
                        
                        hoverinfo="text",
                        texttemplate="%{text}",
                        colorscale="BuGn",
                        colorbar=dict(title="–ü—Ä–æ—Ü–µ–Ω—Ç"),
                        textfont=dict(size=12, color="black"),  # –ú–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    )
                )

                fig.update_layout(
                    xaxis_title="–¢–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞",
                    yaxis_title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
                    height=800
                )

            else:
                st.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {agg_mode}")
                continue
            
            st.plotly_chart(fig, use_container_width=True, key=f"chart_{agg_mode}_{group_key}")


def render_correlation_heatmap(df: pd.DataFrame, char_groups: dict):
    st.subheader("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")

    all_cols = set()
    for group_cols in char_groups.values():
        all_cols.update(group_cols)
    cols = [col for col in all_cols if col in df.columns]

    corr = df[cols].fillna(0).corr()
    fig = px.imshow(
        corr,
        text_auto=".2f",
        color_continuous_scale="RdBu_r",
        aspect="auto",
        title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"
    )
    fig.update_layout(height=800)
    st.plotly_chart(fig, use_container_width=True)


def render_score_analysis(df: pd.DataFrame):
    st.subheader("üèÖ –û—Ü–µ–Ω–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º)")

    fig = px.bar(
        df.sort_values("total_score", ascending=False),
        x="name",
        y=["positive_score", "negative_score", "total_score"],
        title="–û—Ü–µ–Ω–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)",
        barmode="group",
        hover_data=["name", "level", "type"],
    )
    fig.update_layout(xaxis_tickangle=45, height=600)
    st.plotly_chart(fig, use_container_width=True)

    fig = px.bar(
        df,
        x="name",
        y=["total_score"],
        title="–û—Ü–µ–Ω–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–ø–æ —É—Ä–æ–≤–Ω—è–º)",
        barmode="group",
        color="level",
        hover_data=["name", "level", "type", "positive_score", "negative_score"],
    )
    fig.update_layout(xaxis_tickangle=45, height=600)
    st.plotly_chart(fig, use_container_width=True)

    fig = px.bar(
        df,
        x="name",
        y=["total_score"],
        title="–û—Ü–µ–Ω–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–ø–æ —Ç–∏–ø–∞–º)",
        barmode="group",
        color="type",
        hover_data=["name", "level", "type", "positive_score", "negative_score"],
    )
    fig.update_layout(xaxis_tickangle=45, height=600)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìâ –í–ª–∏—è–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ tier")
    cols = st.columns(3)
    cols[0].plotly_chart(
        px.scatter(
            df, 
            x="total_score", 
            y="af_rank_main", 
            title="score vs af_rank_main", 
            hover_data=["name", "level", "type"],
            color="level",
            ), 
        use_container_width=True)
    cols[1].plotly_chart(px.scatter(df, x="total_score", y="cost_main", title="score vs cost_main", hover_data=["name", "level", "type"], color="level",), use_container_width=True)
    cols[2].plotly_chart(px.scatter(df, x="total_score", y="tier_main", title="score vs tier_main", hover_data=["name", "level", "type"], color="level",), use_container_width=True)


def compute_score_contributions(df: pd.DataFrame, weights: dict, abs_weigths: dict) -> pd.DataFrame:
    score_contributions = []
    for _, row in df.iterrows():
        contributions = {}
        for col, coef in weights.items():
            val = row.get(col, 0)
            if pd.notna(val):
                contributions[col] = val * coef
            else:
                contributions[col] = 0.0  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        
        # –î—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è abs_weights
        for col, coef in abs_weigths.items():
            val = row.get(col, 0)
            if pd.notna(val) and val != 0:
                if val > 0:
                    contributions[col] = val * coef
                else:
                    contributions[col] = ((val + 1) * -1) * coef
            else:
                contributions[col] = 0.0  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É

        score_contributions.append(contributions)

    score_df = pd.DataFrame(score_contributions)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ weights –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
    for col in weights.keys():
        if col not in score_df:
            score_df[col] = 0.0

    for col in abs_weigths.keys():
        if col not in score_df:
            score_df[col] = 0.0

    # –î–æ–±–∞–≤–∏–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    score_df["name"] = df.get("name", None)
    score_df["type"] = df.get("type", None)
    score_df["level"] = df.get("level", None)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    score_df["total_score"] = score_df[list(weights.keys())].sum(axis=1)

    return score_df


def render_score_analysis_2(df: pd.DataFrame):
    score_df = compute_score_contributions(df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)

    # print(score_df['level'].unique())

    level_order = ["None", "1", "2", "3", "4", "5", "6", "–ë–∞–∑–æ–≤—ã–π", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ú–µ–∑–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ì–∏–ø–µ—Ä–º–æ–¥–∏—Ñ–∏–∫–∞—Ç", "–ê–±—Å–æ–ª—é—Ç"]

    def transform_level_column(df: pd.DataFrame) -> pd.DataFrame:
        df = df.copy()

        def transform_level(val):
            val_str = str(val).strip()
            return f"–£—Ä. {val_str}" if val_str.isdigit() else \
                    val_str

        df["level"] = df["level"].apply(transform_level)

        # –ü–æ–ª—É—á–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –∑–∞–¥–∞–¥–∏–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        level_order = list(dict.fromkeys(df["level"].dropna()))
        df["level"] = pd.Categorical(df["level"], categories=level_order, ordered=True)

        return df, level_order


    score_df_long = score_df.melt(
        id_vars=["name", "type", "level", "total_score"],
        var_name="parameter",
        value_name="score_contribution"
    )

    st.subheader("üìä –í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ score –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)")
    fig4 = px.bar(score_df_long.sort_values("total_score", ascending=False), x="name", y="score_contribution", color="parameter",
                  title="–í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã–π score (–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)", barmode="stack")
    st.plotly_chart(fig4, use_container_width=True, key="score_bar2")

    st.subheader("üìä –í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ score –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    fig1 = px.bar(score_df_long, x="name", y="score_contribution", color="parameter",
                  title="–í–∫–ª–∞–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã–π score", barmode="stack")
    st.plotly_chart(fig1, use_container_width=True, key="score_bar")

    st.subheader("üì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ score –ø–æ —Ç–∏–ø–∞–º")
    fig2 = px.box(
        score_df,
        x="type",
        y="total_score",
        points="all",
        color="level",  # –¶–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        title="Score –ø–æ —Ç–∏–ø—É",
        hover_data=["name", "total_score", "level", "type"]
    )
    st.plotly_chart(fig2, use_container_width=True, key="score_box_type")

    score_df, level_order = transform_level_column(score_df)

    st.subheader("üì∂ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ score –ø–æ —É—Ä–æ–≤–Ω—è–º")
    fig3 = px.box(
        score_df,
        x="level",
        y="total_score",
        points="all",
        color="type",  # –¶–≤–µ—Ç –ø–æ —Ç–∏–ø—É
        title="Score –ø–æ —É—Ä–æ–≤–Ω—é",
        category_orders={"level": level_order},
        hover_data=["name", "total_score", "level", "type"]
    )
    st.plotly_chart(fig3, use_container_width=True, key="score_box_level")


def render_stats_count_distribution(df: pd.DataFrame):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤ —É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    total_stats = len(IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS)

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤
    counts = []
    for _, row in df.iterrows():
        filled = sum(
            1 for col in (IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS)
            if col in row and pd.notna(row[col]) and row[col] != 0
        )
        counts.append(filled)

    df_counts = df.copy()
    df_counts["filled_stats"] = counts

    # --- –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ---
    fig = px.histogram(
        df_counts,
        x="filled_stats",
        nbins=total_stats,
        title="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤ —É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
        labels={"filled_stats": "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"},
    )
    fig.update_traces(marker=dict(line=dict(width=1, color="black")))
    fig.update_xaxes(dtick=1)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –¥–µ–ª–µ–Ω–∏–µ
    fig.update_layout(bargap=0.05)

    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤ —É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    st.plotly_chart(fig, use_container_width=True)

    # --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ type ---
    fig_type = px.histogram(
        df_counts,
        x="filled_stats",
        color="type",
        nbins=total_stats,
        barmode="overlay",
        title="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
        labels={"filled_stats": "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"},
    )
    fig_type.update_traces(opacity=0.7, marker=dict(line=dict(width=0.5, color="black")))
    fig_type.update_xaxes(dtick=1)
    st.subheader("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    st.plotly_chart(fig_type, use_container_width=True)

    # --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ level ---
    fig_level = px.histogram(
        df_counts,
        x="filled_stats",
        color="level",
        nbins=total_stats,
        barmode="overlay",
        title="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
        labels={"filled_stats": "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"},
    )
    fig_level.update_traces(opacity=0.7, marker=dict(line=dict(width=0.5, color="black")))
    fig_level.update_xaxes(dtick=1)
    st.subheader("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    st.plotly_chart(fig_level, use_container_width=True)

def render_stats_count_scatter(df: pd.DataFrame):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π scatter-–≥—Ä–∞—Ñ–∏–∫: –∫–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∫–∞–∫ —Ç–æ—á–∫–∞ —Å —á–∏—Å–ª–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤"""
    total_stats = len(IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS)

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤
    counts = []
    for _, row in df.iterrows():
        filled = sum(
            1 for col in (IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS)
            if col in row and pd.notna(row[col]) and row[col] != 0
        )
        counts.append(filled)

    df_counts = df.copy()
    df_counts["filled_stats"] = counts

    # --- Scatter-–≥—Ä–∞—Ñ–∏–∫ ---
    fig = px.scatter(
        df_counts,
        x="filled_stats",
        y="af_rank_main",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ cost_main –∏–ª–∏ tier_main
        color="type",
        hover_data=["name", "type", "level", "filled_stats", "cost_main", "tier_main"],
        title="üîé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤",
        labels={
            "filled_stats": "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã",
            "af_rank_main": "–†–∞–Ω–≥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"
        }
    )

    fig.update_traces(marker=dict(size=10, opacity=0.7, line=dict(width=1, color="black")))
    fig.update_xaxes(dtick=1, range=[0, total_stats + 1])
    fig.update_layout(hovermode="closest")

    st.subheader("üîé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤")
    st.plotly_chart(fig, use_container_width=True)


def render_description_length_distribution(df: pd.DataFrame):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π (RU vs EN)"""
    ru_lengths = df["main_description"].fillna("").astype(str).apply(len)
    en_lengths = df["main_description_eng"].fillna("").astype(str).apply(len)

    df_lengths = pd.DataFrame({
        "artifact": df["name"],
        "RU": ru_lengths,
        "EN": en_lengths,
    })

    # --- –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ RU vs EN ---
    fig = px.histogram(
        df_lengths.melt(id_vars="artifact", value_vars=["RU", "EN"], var_name="lang", value_name="length"),
        x="length",
        color="lang",
        barmode="overlay",
        nbins=40,
        title="üìñ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π (RU vs EN)",
        labels={"length": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"},
        color_discrete_map={"RU": "royalblue", "EN": "orangered"}  # —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    )
    fig.update_traces(opacity=0.6, marker=dict(line=dict(width=1, color="black")))
    st.subheader("üìñ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π (RU vs EN)")
    st.plotly_chart(fig, use_container_width=True)

    # --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ RU vs EN ---
    fig2 = px.scatter(
        df_lengths,
        x="RU",
        y="EN",
        color="RU",  # –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –¥–ª–∏–Ω–µ RU –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        text="artifact",
        title="üìñ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π (RU vs EN)",
        labels={"RU": "–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è (RU)", "EN": "–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è (EN)"},
    )
    fig2.update_traces(
        textposition="top center",
        marker=dict(size=10, opacity=0.7, line=dict(width=0.5, color="black"))
    )
    fig2.update_layout(
        width=900, height=700  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤—É—é –ª–∏–Ω–∏—é x = y
    fig2.add_shape(
        type="line",
        x0=df_lengths["RU"].min(),
        y0=df_lengths["RU"].min(),
        x1=df_lengths["RU"].max(),
        y1=df_lengths["RU"].max(),
        line=dict(
            color="rgba(128, 128, 128, 0.5)",  # —Å–µ—Ä—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 70%
            width=2,
            dash="dash"
        ),
        layer='below'  # —á—Ç–æ–±—ã –ª–∏–Ω–∏—è –±—ã–ª–∞ –ø–æ–¥ —Ç–æ—á–∫–∞–º–∏
    )
    st.subheader("üìñ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π (RU vs EN)")
    st.plotly_chart(fig2, use_container_width=True)


def render_stats_count_boxplots(df: pd.DataFrame):
    """–ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤ —É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ type –∏ level"""

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤
    counts = []
    for _, row in df.iterrows():
        filled = sum(
            1 for col in (IMMUNITY_COLS + CAP_COLS + RESTORE_COLS + UTILITY_COLS)
            if col in row and pd.notna(row[col]) and row[col] != 0
        )
        counts.append(filled)

    df_counts = df.copy()
    df_counts["filled_stats"] = counts

    # --- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π ---
    def transform_level_column(df: pd.DataFrame) -> tuple[pd.DataFrame, list]:
        df = df.copy()

        def transform_level(val):
            val_str = str(val).strip()
            return f"–£—Ä. {val_str}" if val_str.isdigit() else val_str

        df["level"] = df["level"].apply(transform_level)

        # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è
        level_order = list(dict.fromkeys(df["level"].dropna()))
        df["level"] = pd.Categorical(df["level"], categories=level_order, ordered=True)

        return df, level_order

    df_counts, level_order = transform_level_column(df_counts)

    # --- –ì—Ä–∞—Ñ–∏–∫ –ø–æ type (—Ü–≤–µ—Ç = level) ---
    st.subheader("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º")
    fig_type = px.box(
        df_counts,
        x="type",
        y="filled_stats",
        points="all",
        color="level",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º",
        hover_data=["name", "level", "type", "filled_stats"]
    )
    st.plotly_chart(fig_type, use_container_width=True, key="stats_box_type")

    # --- –ì—Ä–∞—Ñ–∏–∫ –ø–æ level (—Ü–≤–µ—Ç = type) ---
    st.subheader("üì∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º")
    fig_level = px.box(
        df_counts,
        x="level",
        y="filled_stats",
        points="all",
        color="type",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º",
        category_orders={"level": level_order},
        hover_data=["name", "level", "type", "filled_stats"]
    )
    st.plotly_chart(fig_level, use_container_width=True, key="stats_box_level")


def render_all_charts(df: pd.DataFrame, char_groups: dict):
    # üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
    render_char_heatmap_by_type(df, char_groups, agg_mode="sum")
    render_char_heatmap_by_type(df, char_groups, agg_mode="presence")

    # üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    render_correlation_heatmap(df, char_groups)

    # –†–∞—Å—á—ë—Ç –æ—Ü–µ–Ω–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    scored_df = compute_artifact_scores(df, st.session_state.STATS_WEIGHT, st.session_state.STAT_ABS_WEIGHT)
    render_score_analysis(scored_df)
    render_score_analysis_2(df)

    render_stats_count_distribution(df)
    render_stats_count_boxplots(df)
    render_description_length_distribution(df)